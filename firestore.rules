/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes rapid prototyping by focusing on authorization and deferring
 * detailed data validation. It enforces strict ownership and role-based access control.
 *
 * Data Structure:
 * - /users/{userId}:  User profiles, accessible only to the owner and admins.
 * - /partners/{partnerId}: Partner information, write-protected.
 * - /orders/{orderId}: Orders placed by partners, write-protected.
 * - /products/{productId}: Product catalog, publicly readable, but create/update/delete operations are write-protected and should only be performed by an admin user.
 * - /rechargeRequests/{requestId}: Recharge requests, write-protected.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Read-only collections require manual seeding and are write-protected.
 * - Default security posture for ambiguous relationships is strict owner-only access.
 *
 * Denormalization for Authorization:
 *   No denormalization needed in this version.
 *
 * Structural Segregation:
 *   No structural segregation is implemented.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows access to user-specific data.
     * @path /users/{userId}
     * @allow (get, list) if isSignedIn() && isOwner(userId)
     * @allow (create) if isSignedIn() && isOwner(userId)
     * @allow (update, delete) if isSignedIn() && isExistingOwner(userId)
     * @deny (get, list) if !isSignedIn() || !isOwner(userId)
     * @deny (create) if !isSignedIn() || !isOwner(userId)
     * @deny (update, delete) if !isSignedIn() || !isExistingOwner(userId)
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to partner information.
     * @path /partners/{partnerId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if false
     * @principle Allows read access to partner data; restricts write access for manual seeding only.
     */
    match /partners/{partnerId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to order information.
     * @path /orders/{orderId}
     * @allow (get, list) if false
     * @allow (create, update, delete) if false
     * @principle Restricts write access to order data; manual seeding only.
     */
    match /orders/{orderId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to product information.
     * @path /products/{productId}
     * @allow (get, list) if true
     * @deny (create, update, delete) if true
     * @principle Restricts write access to product data; manual seeding only.
     * @issue The `create` operation was failing because there was no rule allowing it. Now, it is explicitly denied.
     */
    match /products/{productId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to recharge request information.
     * @path /rechargeRequests/{requestId}
     * @allow (get, list) if false
     * @allow (create, update, delete) if false
     * @principle Restricts write access to recharge request data; manual seeding only.
     */
    match /rechargeRequests/{requestId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
        return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}